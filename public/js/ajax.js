/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/ajax.js":
/*!******************************!*\
  !*** ./resources/js/ajax.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n$(document).ajaxSend(function (r, s) {\n  $(\".spinner\").show();\n});\n$(document).ajaxStop(function (r, s) {\n  $(\".spinner\").fadeOut(\"fast\");\n});\nvar Ajax = {\n  carregarConteudo: function carregarConteudo(endereco, componente) {\n    $(\".spinner\").show();\n    $.ajax({\n      url: endereco,\n      encoding: \"UTF-8\",\n      success: function success(response) {\n        componente.html(response);\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        Ajax.tratarErroAjax(jqXHR.status, jqXHR.responseText);\n        Tela.fecharModal();\n      },\n      complete: function complete() {\n        $(\".spinner\").hide();\n      }\n    });\n  },\n  carregarConteudoViaPost: function carregarConteudoViaPost(endereco, componente, dados) {\n    $(\".spinner\").show();\n    $.ajax({\n      url: endereco,\n      encoding: \"UTF-8\",\n      method: \"POST\",\n      data: dados,\n      success: function success(response) {\n        componente.html(response);\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        Ajax.tratarErroAjax(jqXHR.status, jqXHR.responseText);\n        Tela.fecharModal();\n      },\n      complete: function complete() {\n        $(\".spinner\").hide();\n      }\n    });\n  },\n\n  /**\n   * Este método deverá tratar os erros de ajax que ocorrerem.\n   * Cada código http (400, 404, 500 e etc) deverá realizar um procedimento específico para não apresentar\n   * erros diretamente ao usuário.\n   * @param status\n   * @param dados\n   */\n  tratarErroAjax: function tratarErroAjax(status, dados) {\n    var msg = dados;\n\n    if (dados instanceof Object) {\n      msg = dados.responseJSON;\n\n      if (dados.responseJSON instanceof Object) {\n        msg = dados.responseJSON.message;\n      }\n    }\n\n    if (status === 401) {\n      Tela.avisoComAlerta(\"Sua sessão expirou! Por favor, realize o login novamente!\");\n    } else if (status == 500) {\n      Tela.avisoComErro(msg);\n    } else if (status == 403) {\n      Tela.avisoComErro(\"Acesso negado. Favor verificar com o suporte.\");\n    } else if (status == 409) {\n      Tela.avisoComErro(msg);\n    } else if (status == 404) {\n      Tela.avisoComErro(\"Página não encontrada!\");\n    } else if (status == 422) {\n      var errors = dados.responseJSON.errors;\n      var errorsHtml = \"<ul>\";\n      $.each(errors, function (key, value) {\n        errorsHtml += \"<li>\" + value[0] + \"</li>\"; //showing only the first error.\n      });\n      errorsHtml += \"</ul>\";\n      Tela.avisoComErro(errorsHtml);\n    } else {\n      Tela.avisoComErro(\"Erro: \" + status + \" Mensagem: \" + msg);\n    }\n  },\n\n  /**\n   * Função que busca registro no servidor.\n   * Normalmente usado pelo filtro nos indexes.\n   * - Faz a busca e atualiza o conteudo dentro do componente 'nomeObjeto'\n   *\n   * - beforeSend: limpa o 'nomeObjeto' para receber os novos dados.\n   *\n   * - success: exibe os dados em 'nomeObjeto'\n   *\n   * - error: trata os erros de ajax\n   * @param divLista\n   * @param divLoad\n   * @param endereco\n   * @param metodo\n   * @param dados\n   * @param callback\n   */\n  buscarRegistros: function buscarRegistros(divLista, endereco, dados, metodo, callback) {\n    $.ajax({\n      url: endereco,\n      type: metodo,\n      data: dados,\n      success: function success(data, textStatus, jqXHR) {\n        $(divLista).html(data);\n\n        if (typeof callback == \"function\") {\n          callback.call();\n        }\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        Ajax.tratarErroAjax(jqXHR.status, jqXHR);\n      }\n    });\n  },\n\n  /**\n   * Salvar o registro.\n   * @param form\n   * @param callback\n   * @param showResultInScreen\n   */\n  salvarRegistro: function salvarRegistro(form, callback) {\n    var showResultInScreen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var formData = $(form).serialize();\n    var formUrl = $(form).attr(\"action\");\n    var footerModal = $(form).find(\"#footerModal\");\n    $.ajax({\n      url: formUrl,\n      type: \"POST\",\n      data: formData,\n      beforeSend: function beforeSend() {\n        $(footerModal).find(\"button[type=submit]\").attr(\"disabled\", \"true\");\n      },\n      success: function success(data, textStatus, jqXHR) {\n        $(\"#formSearch\").submit();\n\n        if (!$(form).find(\"input[name$='continue']\").is(\":checked\") && !showResultInScreen) {\n          var buttonClose = $(form.closest('.modal-content')).find('.btn-close');\n          buttonClose.click();\n        }\n\n        $(form)[0].reset();\n\n        if (showResultInScreen) {\n          $(\"#divForm_\" + componente).html(data);\n        }\n\n        Tela.avisoComSucesso(data);\n\n        if (typeof callback === \"function\") {\n          callback.call();\n        }\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        Ajax.tratarErroAjax(jqXHR.status, jqXHR);\n      },\n      complete: function complete() {\n        $(footerModal).find(\"button[type=submit]\").removeAttr(\"disabled\");\n      }\n    });\n  },\n\n  /**\n   * Método usado para atualizar registro diretamente de um click de botão ou\n   * função javascript. Quando não será aberto um formulário de confirmação\n   * @param formUrl\n   * @param dadosForm\n   * @param callback\n   */\n  salvarRegistroDireto: function salvarRegistroDireto(formUrl, dadosForm, method, callback) {\n    var footerModal = $(form).find(\"#footerModal\");\n    $.ajax({\n      url: formUrl,\n      type: method,\n      data: dadosForm,\n      beforeSend: function beforeSend() {\n        $(footerModal).find(\"button[type=submit]\").attr(\"disabled\", \"true\");\n      },\n      success: function success(data, textStatus, jqXHR) {\n        Tela.avisoComSucesso(data);\n\n        if (typeof callback === \"function\") {\n          callback.call();\n        }\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        Ajax.tratarErroAjax(jqXHR.status, jqXHR);\n      },\n      complete: function complete() {\n        $(footerModal).find(\"button[type=submit]\").removeAttr(\"disabled\");\n      }\n    });\n  },\n\n  /**\n   * este metodo é para enviar dados de formulário que possuírem arquivos (File)\n   * o parametro dados deve ser do tipo formData\n   * exemplo de uso em arquivo/anexarForm.gsp\n   * acrescentado os parametros (contentType e processData)\n   * para não validar os dados vindos do formulário.\n   * isso impede o bloqueio por parte do javascript\n   */\n  salvarRegistroComArquivo: function salvarRegistroComArquivo(formulario, callback, mostrarTela) {\n    if (mostrarTela === undefined) {\n      mostrarTela = false;\n    }\n\n    var fd = new FormData(formulario[0]);\n    var formUrl = $(formulario).attr(\"action\");\n    var componente = $(formulario).attr(\"component\");\n    var footerModal = $(formulario).find(\"#footerModal\");\n    $.ajax({\n      url: formUrl,\n      type: \"POST\",\n      data: fd,\n      contentType: false,\n      processData: false,\n      beforeSend: function beforeSend() {\n        $(footerModal).find(\"button[type=submit]\").attr(\"disabled\", \"true\");\n      },\n      success: function success(data, textStatus, jqXHR) {\n        $(\"#formSearch\").submit();\n\n        if (!$(\"input[name=continuar]\").is(\":checked\") && !mostrarTela) {\n          var buttonClose = $(formulario.closest('.modal-content')).find('.btn-close');\n          buttonClose.click();\n        }\n\n        if (!mostrarTela) {\n          $(formulario)[0].reset();\n        } else {\n          $(\"#divForm_\" + componente).html(data);\n        }\n\n        Tela.avisoComSucesso(\"Salvo com sucesso!\");\n\n        if (typeof callback === \"function\") {\n          callback.call();\n        }\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        Ajax.tratarErroAjax(jqXHR.status, jqXHR);\n      },\n      complete: function complete() {\n        $(footerModal).find(\"button[type=submit]\").removeAttr(\"disabled\");\n      }\n    });\n  },\n  deletarRegistro: function deletarRegistro() {\n    var formUrl = $(\"#modalDelete_urlExcluir\").val();\n    var callback = $(\"#modalDelete_callback\").val();\n    var id = $(\"#modalDelete_id\").val(); // let footerModal = $(form).find(\"#footerModal\");\n\n    $.ajax({\n      url: formUrl,\n      type: \"DELETE\",\n      beforeSend: function beforeSend() {// $(footerModal)\n        //     .find(\"button[type=submit]\")\n        //     .attr(\"disabled\", \"true\");\n        // console.log('ok')\n      },\n      success: function success(data, textStatus, jqXHR) {\n        $(\"#row_\" + id).remove();\n        $(\"#modalDelete\").modal(\"hide\");\n        Tela.avisoComSucesso(\"Excluído com sucesso!\");\n\n        if (typeof eval(callback) == \"function\") {\n          callback.call();\n        }\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        Ajax.tratarErroAjax(jqXHR.status, jqXHR.responseJSON);\n      },\n      complete: function complete() {// $(footerModal)\n        //     .find(\"button[type=submit]\")\n        //     .removeAttr(\"disabled\");\n        // console.log('ok')\n      }\n    });\n  },\n  deletarRegistroDireto: function deletarRegistroDireto(formUrl, dadosForm, method, callback) {\n    var footerModal = $(form).find(\"#footerModal\");\n    $.ajax({\n      url: formUrl,\n      type: method,\n      data: dadosForm,\n      beforeSend: function beforeSend() {\n        $(footerModal).find(\"button[type=submit]\").attr(\"disabled\", \"true\");\n      },\n      success: function success(data, textStatus, jqXHR) {\n        $(\"#\" + data).remove();\n\n        if (typeof callback === \"function\") {\n          callback.call();\n        }\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        Ajax.tratarErroAjax(jqXHR.status, jqXHR);\n      },\n      complete: function complete() {\n        $(footerModal).find(\"button[type=submit]\").removeAttr(\"disabled\");\n      }\n    });\n  }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Ajax);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/ajax.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/ajax.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;